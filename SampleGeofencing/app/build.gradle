apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "kotlin-kapt"
apply plugin: 'com.google.firebase.crashlytics'

// For the google services copy the google-services.json file that you can found :
// https://console.firebase.google.com/project/level-prism-257420/settings/general/android:com.ghostwan.sample.geofencing
// in the app folder
android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.ghostwan.sample.geofencing"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 5
        versionName "1.3.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Go to https://console.developers.google.com/apis/credentials?project=level-prism-257420 to retrieve the Google API key
        // And add this key in your local.properties file:
        // GOOGLE_MAP_KEY=AIz....
        //
        // Note that the API key is linked to the encryption key used to sign the APK.
        // You can either add a different API key for each encryption key,
        // including the release key that is used to sign the APK for publishing.
        // You can define the keys for the debug and release targets in src/debug/ and src/release/.
        // Or add you current key in your API restriction
        // To get your debug keystore hash, SHA1:
        // keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android
        //
        resValue "string", "GOOGLE_MAP_KEY", "${getLocalProperty('GOOGLE_MAP_KEY')}"
    }
    signingConfigs {
        // To use specific keystore add in you local.properties file, keystore information:
        // KEYSTORE_PATH=/home/......keystore
        // KEYSTORE_PASSWORD=my_keystore_password
        // KEYSTORE_ALIAS=my_alias
        // KEY_PASSWORD=my_key_password
        release {
            if (getLocalProperty("KEYSTORE_PATH") != "") {
                def keystorePwd = getLocalProperty("KEYSTORE_PASSWORD")
                def alias = getLocalProperty("KEYSTORE_ALIAS")
                def keystore = new File(getLocalProperty("KEYSTORE_PATH"))
                def keyPwd = getLocalProperty("KEY_PASSWORD")
                if (keystore.exists()) {
                    storeFile keystore
                    storePassword keystorePwd
                    keyAlias alias
                    keyPassword keyPwd
                } else {
                    throw new GradleScriptException("keystore file is not exist", null)
                }
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin - Language
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "androidx.activity:activity-ktx:1.2.0-rc01"

    // Room - Database
    def room_version = "2.2.6"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Koin - Dependency Injection
    def koin_version = '2.0.1'
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"

    // Couroutines - Async
    def coroutines_version = "1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutines_version"

    // UI components
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.fragment:fragment:1.3.0-rc01'

    // Navigation
    def navigation_version = "2.0.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Play services
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.libraries.places:places:2.4.0'
//    implementation "org.koin:koin-android-architecture:$koin_version"

    // Tests
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Firebase
    implementation 'com.google.firebase:firebase-analytics:18.0.0'
    implementation 'com.google.firebase:firebase-database:19.5.1'
    implementation 'com.google.firebase:firebase-auth:20.0.1'
    implementation 'com.google.firebase:firebase-crashlytics:17.3.0'
    implementation 'com.google.firebase:firebase-analytics:18.0.0'
    implementation 'com.firebaseui:firebase-ui-auth:4.3.1'

    //Doki
    implementation('dev.doubledot.doki:library:0.0.1@aar') {
        transitive = true
    }
}

apply plugin: 'com.google.gms.google-services'
